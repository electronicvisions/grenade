#!/usr/bin/env python

import os
from os.path import join
from waflib.extras.gtest import summary
from waflib.extras.symwaf2ic import get_toplevel_path

def depends(ctx):
    ctx('grenade')
    ctx('haldls', 'dlens')
    ctx('halco', 'pyhalco')
    ctx('code-format')

def options(opt):
    opt.load('compiler_cxx')
    opt.load('pytest')
    opt.load('pylint')
    opt.load('pycodestyle')

def configure(cfg):
    cfg.load('compiler_cxx')
    cfg.load('python')
    cfg.check_python_version()
    cfg.check_python_headers()
    cfg.load('pytest')
    cfg.load('genpybind')
    cfg.load('pylint')
    cfg.load('pycodestyle')

def build(bld):
    bld.env.DLSvx_HARDWARE_AVAILABLE = "cube" == os.environ.get("SLURM_JOB_PARTITION")

    if not bld.env.with_pybind:
        bld.fatal('building pygrenade requires pybind')

    bld(
        target='_pygrenade_vx_common',
        source='../include/grenade/vx/common/python_bindings.h',
        genpybind_tags='grenade_vx_common',
        features='genpybind cxx cxxshlib pyext',
        use=['grenade_vx', 'pyhaldls_vx_v3'],
        install_path='${PREFIX}/lib',
    )

    bld(
        target='_pygrenade_vx_signal_flow',
        source='../include/grenade/vx/signal_flow/python_bindings.h',
        genpybind_tags='grenade_vx_signal_flow',
        features='genpybind cxx cxxshlib pyext',
        use=['grenade_vx', 'pyhaldls_vx_v3', 'pylola_vx_v3',
             'pyhalco_hicann_dls_vx_v3', '_pygrenade_vx_common'],
        install_path='${PREFIX}/lib',
    )

    bld(
        target='_pygrenade_vx_execution',
        source='../include/grenade/vx/execution/python_bindings.h',
        genpybind_tags='grenade_vx_execution',
        features='genpybind cxx cxxshlib pyext',
        use=['grenade_vx', 'pyhalco_hicann_dls_vx_v3', 'pyhxcomm_vx',
             'pystadls_vx_v3', '_pygrenade_vx_signal_flow'],
        install_path='${PREFIX}/lib',
    )

    bld(
        target='_pygrenade_vx_network_placed_logical',
        source='../include/grenade/vx/network/placed_logical/python_bindings.h',
        genpybind_tags='grenade_vx_network_placed_logical',
        features='genpybind cxx cxxshlib pyext',
        use=['grenade_vx', 'pyhaldls_vx_v3', 'pylola_vx_v3',
             'pyhalco_hicann_dls_vx_v3', '_pygrenade_vx_execution',
             '_pygrenade_vx_signal_flow',
             '_pygrenade_vx_network_placed_atomic'],
        install_path='${PREFIX}/lib',
    )

    bld(
        target='pygrenade_vx',
        features='py use pylint pycodestyle',
        use=['_pygrenade_vx_common',
             '_pygrenade_vx_execution',
             '_pygrenade_vx_signal_flow',
             '_pygrenade_vx_network_placed_logical',
             'pylogging'],
        relative_trick=True,
        source=bld.path.ant_glob('pygrenade_vx/**/*.py'),
        install_path = '${PREFIX}/lib',
        pylint_config=join(get_toplevel_path(), "code-format", "pylintrc"),
        pycodestyle_config=join(get_toplevel_path(), "code-format", "pycodestyle")
    )

    bld(
        name='pygrenade_swtest_vx',
        tests='test/pygrenade_swtest_vx.py',
        features='use pytest pylint pycodestyle',
        use=['pygrenade_vx', 'dlens_vx_v3'],
        install_path='${PREFIX}/bin',
        pylint_config=join(get_toplevel_path(), "code-format", "pylintrc"),
        pycodestyle_config=join(get_toplevel_path(), "code-format", "pycodestyle")
    )

    bld(
        name='pygrenade_hwtest_vx',
        tests='test/pygrenade_hwtest_vx.py',
        features='use pytest pylint pycodestyle',
        use=['pygrenade_vx', 'dlens_vx_v3'],
        install_path='${PREFIX}/bin',
        pylint_config=join(get_toplevel_path(), "code-format", "pylintrc"),
        pycodestyle_config=join(get_toplevel_path(), "code-format", "pycodestyle"),
        skip_run=not bld.env.DLSvx_HARDWARE_AVAILABLE
    )

    bld.add_post_fun(summary)
